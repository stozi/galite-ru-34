/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#define nmnv 0
#define nmnvcf 1
#define alfa 2
#define alfacf 3

&mmv {    
        time-to-max-speed-ms = <400>;
        acceleration-exponent=<1>;
};
&msc {    
        time-to-max-speed-ms = <1000>;
        acceleration-exponent=<0>;
}; 

&mt {
        quick-tap-ms = <200>;
};

&sk {
   	release-after-ms = <4000>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_l3 {
            timeout-ms = <50>;
            key-positions = <30 31>;
	    layers = <2 3>;
            bindings = <&tog 3>;
        };
    };
};

/ {

macros {
        ac_THE_LC: ac_THE_LC {
        label = "ZM_ac_THE_LC";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings
        = <&macro_tap &kp D>
        , <&macro_release &kp LSHFT>
        , <&macro_tap &kp J &kp L &kp SPACE>
        ;
      };
        ac_BRAK_LC: ac_BRAK_LC {
        label = "ZM_ac_BRAK_LC";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings
        = <&macro_tap &kp KP_LPAR &kp KP_RPAR &kp LEFT>
        ;
      };
        ac_SEN_LC: ac_SEN_LC {
        label = "ZM_ac_SEN_LC";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings
        = <&macro_tap &kp SLASH &kp SPACE &sk LSHIFT>
        ;
    };
	ac_COM_LC: ac_COM_LC {
        label = "ZM_ac_COM_LC";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings
        = <&macro_tap &kp SLASH &kp R &kp I &kp C>
        ;
    };
};

	keymap {
		compatible = "zmk,keymap";

		nmnv {
			bindings = <
	                &kp C_BRI_UP   &kp LC(K)     &kp K_PASTE    &kp K_COPY      &kp K_CUT     &kp SLASH &ac_THE_LC &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE
			&mmv MOVE_LEFT &mmv MOVE_UP  &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp PG_UP     &kp TAB   &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT      
			&kp C_BRI_DN   &mkp RCLK     &mkp MCLK      &mkp LCLK       &kp PG_DN     &kp ESC   &kp HOME   &kp LC(BSPC) &kp LC(DEL)  &kp END   
				                                             &tog 2 &lt 1 ENTER   &mt LSHIFT SPACE &mt LALT BSPC
			>;
		};
		nmnvcf {
			bindings = <
			&kp F9        &kp F10       &kp F1        &kp F2        &kp F3           &kp F4  &kp F5       &kp F6           &kp F7          &kp F8
			&kp LC(EQUAL) &msc SCRL_UP &msc SCRL_DOWN &kp LC(ENTER) &kp LC(PG_UP)    &kp F11 &kp LC(LEFT) &kp LC(DOWN)     &kp LC(UP)      &kp LC(RIGHT) 
			&kp LC(DOT)   &kp LC(H)    &kp LC(B)      &sk LCTRL     &kp LC(PG_DN)    &kp F12 &kp LC(HOME) &kp LS(LC(BSPC)) &kp LS(LC(DEL)) &kp LC(END)
				                                          &trans   &trans        &trans  &mt LALT DEL
			>;
		};
		alfa {
			bindings = <
			&kp Q     &kp W     &kp E     &kp R     &kp T     &kp Y     &kp U     &kp I     &kp O     &kp P
			&kp A     &kp S     &kp D     &kp F     &kp G     &kp H     &kp J     &kp K     &kp L     &kp SEMI
			&kp Z     &kp X     &kp C     &kp V     &kp B     &kp N     &kp M     &kp COMMA &kp DOT   &kp SLASH
				                 &trans   &lt 3 ENTER     &trans  &mt LALT BSPC
			>;
		};
		alfacf {
			bindings = <
			&kp CAPS &kp BSLH &kp EQUAL &kp RCTRL &kp PAUSE_BREAK  &kp GRAVE &ac_THE_LC &kp SQT     &kp LBKT  &kp RBKT 
			&kp N9   &kp N0   &kp N1    &kp N2    &kp N3           &kp N4    &kp N5     &kp N6      &kp N7    &kp N8
			&none    &none    &none     &sk LCTRL &none            &none     &ac_COM_LC &ac_BRAK_LC &kp MINUS &ac_SEN_LC
				                            &trans   &trans    &trans  &kp DEL
			>;
		};

	};
};
